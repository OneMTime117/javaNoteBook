命名规范：
1、类名使用upperCameCase风格    NiceMapper（但是DO\BO\DTO\VO模型命名不能改变为Vo）
2、不使用下划线或者美元符号进行命名
3、方法名、参数名、变量 使用lowerCamelCase风格   userName
4、常量名全大写、单个词     MAX_COUNT
5、对于service、mapper、impl、test、abstract、Exception等特殊作用的类，需要添加上其类型（前缀后缀）
6、数组定义    String []  a;
7、实体类中的布尔类型变量，不能以is开头
8、包名小写，并且为一个单词
9、类名不能进行不合理的缩写
10、接口不需要加public（类、方法、属性），并添加有效Javadoc
11、带有设计模式的类，应在类名中体现
service/DAO层方法命名：
get 获得单个对象
list获得多个对象
count  获得统计值
save/insert  插入
remove 删除
update 更新

常量定义
1、不允许直接在代码中使用魔法值（未定义的常量，该常量对于整个代码很重要，如sql表名、特定数据前缀。。。，方便其他开发任何快速找到）
2、long类型变量初始值要添加L
3、不要使用一个常量类来管理所有常量，需要根据常量类型，放在对应的相关类中

格式规范：（1-3 可以直接通过IDE 的格式化代码实现）
1、使用保留字（if、for、while、else等）需要在前后有字符时，添加空格
2、所有运算符左右都需要空格
3、方法定义、使用时，参数，后面需要空格隔开  getuser（String name， String age）
4、对于不同含义的代码，只能使用一个空行隔开
5、超过120个字符后，需要进行换行，且不能在括号前、逗号前、字符串中换行


OOP规约：
1、静态变量和方法，直接通过类名调用，不能使用对象引用
2、所有接口重写方法，必须要有@Override，防止开发者不小心修改方法名
3、尽量不使用可变参数...
4、不能使用过时方法，@Depercated用于标记该方法过时，但还需要该方法在库中执行
5、一般使用常值来调用equals方法，JDK7推荐使用Objects.equals
6、对于基础数据类型的包装类进行数据比较时，统一使用equals方法；因为==只针对于-128到127的整数值，进行常量池的复用，从而实现值相等，则对象相等的比较
7、RPC方法、POJO实体都使用包装数据类型，所有局部变量使用基本数据类型
8、使用JDK的序列化接口seralizable时，不能在新增属性后，修改serialVersionUID字段
9、构造方法中不要加入其它逻辑，需要进行初始化，则放在init方法中
10、实体类必须写toString方法，方便数据打印，查询问题
11、使用String.split 进行分割时，需要对最后一个分割符后的内容进行检查，放在出现以分隔符结尾的情况，导致遍历split得到的结果数组时，出现IndexOutOfBoundsException
12、较大循环体中，出现字符拼接时，使用功能StringBuilder
13、对于不会改变的变量，推荐使用final关键字，提高程序效率

集合处理：
1、自定义对象作为map键、使用set来去除对象集合时，必须重新hashCode和equals
2、ArrayList的subList结果不能强转为Arraylist；并且subList和ArrayList的改变会互相影响对方，并且subList不能能对集合中对象个数做改变，否则会导致ArrayList在使用时发生 ConcurrentModificationException
3 、使用toArray对将list集合转换为数组时，使用有参构造器，并且指定数组大小为list.size，否则当目标数组小于list元素个数时，会自动创建新的数组对象，增加无效对象的创建；大于元素个数时，多余地址被null填充
4、使用Arrays.asList 将数组转换为集合时，不能对集合元素进行修改，只能遍历，否则会出现UnsupportedOperationException；因为转换的对象是Arrays中的内部类，并没有实现集合的修改方法，只是通过适配器模式进行了List接口转换，实现list接口中的遍历等操作，内部数据保存还是使用的数组
5、不要使用泛型通配符的集合来保存同一类型的不同实现类对象；需要此场景时，则直接使用Object
6、foreach不能使用remove、add方法；Iterator可以使用remove，但线程不安全，并发场景需要加同步锁
7、JDK7以后，实现Comparator接口的compare方法时，需要保证对A>B、A=B、A<B三种比较，因此不能直接使用一种比较符合
8、集合、数组初始化时，尽量指定初始值大小
9、map使用entrySet来遍历（keySet遍历时，相当于先遍历一遍，将keySet转换为Interaor（此时将key保存到），用于遍历key，然通过key来遍历hashMap查找对应值；对于entrySet，本身就已经从hashMap中取出了key-value,因此在遍历时只是一个个取出来，速度更快）；或者forEach方法（内部通过直接遍历map的Node节点实现）
10、对于线程安全的map，key和value都不能为null，因此并发时需要对key、value进行是否存在的操作，为了保证；对于treemap由于需要key进行比较排序，因此key不能为null；hashmap key和value都能为null
11、 利用set的唯一性，来代替list的contains进行去重

控制语句：
1、switch中，必须包含default语句，即使是空的；并且每个case都需要通过break/return终止；如果需要刻意的通过switch在判断执行满足条件case后，继续执行后面case，则要注释执行到哪case（如判断打印当前还有哪几个星期）
2、所有条件判断语句后，必须使用大括号，不能省略简写
3、尽量少使用else，使用return来跳过后面判断
4、if-else代码不能超过3层，否则使用switch语句或状态模式（当每个条件中的执行代码过大，不适合阅读时，推荐使用状态模式）
5、不要在条件语句中添加过多的逻辑判断代码，需要时，可以使用一个boolean变量进行结果保存，然后再在条件语句中判断
6、尽量将try-catch、初始化变量、定义对象写在循环体外部，减少不必要的性能损耗
7、对应执行时间开销很长的方法，应该进行参数校验，防止部分参数无效，导致方法执行一半报异常，浪费时间和开销
8、适合参数校验的场景：调用频次低、执行时间长、需要极高可用性和稳定性、对外提供开放接口（由于不是提供给系统内部调用，无法保证接口是否有进攻性）、敏感权限接口（防止黑客恶意攻击）
9、不适合参数校验场景：调用频次非常高、只提供给自己后台代码调用的方法（自己使用，知道方法的参数要求）


注解规范：
1、类、类成员变量、方法 必须使用javadoc注解，方便生成javadoc文档（实际工作中，只对于作为jar使用的代码进行严格要求）
2、所有类都需要提供创建者信息
3、所有抽象方法都需要注释该方法的作用和调用要求
4、单行注释使用//  ;  多行注释使用 /* */
5、保证代码修改时，注释同步修改
6、注释的代码应该配合说明原因。绝对不会使用的代码，应该直接删除
7、对于未完成代码应该添加 TODO（代办事宜）注解(标记人、时间)、对于Bug代码 应该添加 FIXME（不能工作）注解（标记人、时间）

其他
1、在使用功能正则表达式时，应该使用其预编译功能，即在静态常量中定义对应regexRule的正则表达式对象
2、Math.random()方法返回的是double类型，不需要先乘X10倍，然后手动取整；而是直接使用Random对象的nextInt（x）方法，x为最大整数边界，且不能等于
3、获取当前毫秒数，使用system.currentTimeMillis(),而不是new date().getTime()，这效率会更高


异常处理:
1、不要手动捕获JAVA类库中，定义继承了RunTimeException 的异常：如IndexOutOfBoundsExceptionm、NullPointerException；这些异常保证了java类库使用的基础要求，应该由程序员自己规避，而不是运行时检测捕获
2、尽量不要使用异常来进行流程控制，因此异常处理效率更低
3、不要大段代码的使用try-catch；而是对部分代码有针对的使用，进行正确的异常处理
4、对于资源对象，可以使用finally进行关闭，JDK7则推荐使用 try-with-resources方式
5、尽量不要在finally中使用return，它会代替rey-catch中的return返回
6、尽量防止方法返回null
7、减少复制粘贴代码，导致出现多处同时改动，避免遗留


并发处理：
1、获取单例对象时，需要保证线程安全
2、创建线程和线程池时，应定义有意义的线程名，方便出错回溯
3、线程资源必须通过线程池提供，不允许在应用中自行显式创建线程
4、线程池不允许使用Executors创建，而是通过ThreadPoolExecutor方式，从而使开发者能显式明确的定义线程池规则，并且避免OOM
5、SimpleDateFormat线程不安全，一般不能作为全局变量；否则就需要加锁或者ThreadLocal处理，JDK8则推荐使用新的时间API，它们线程安全
6、在高并发下，使用同步时，需要考量锁带来的性能损耗，能用无锁数据结构，就不要用锁；能用锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁
7、在对多个资源同时加锁时，不能出线两个线程的加锁顺序不一致，这样会导致死锁，如线程A 拥有锁1、等待锁2；线程B拥有锁2、等待锁1
8、乐观锁和悲观锁的选择：当冲突概率小于20%，推荐使用乐观锁，否则使用悲观锁；并且乐观锁的重试次数不得大于3次
9、由于Timer为单线程，当出现异常后，会导致其他TimeTask任务全部失效，停止运行，因此推荐使用ScheduledExecutorService
10、Random实例虽然线程安全，但是其内部设计在高并发下，性能很低；因此推荐每个线程使用一个实例
11、推荐使用双重检查锁，来解决单例对象延迟初始化的线程安全问题
12、对于需要Count++操作保证线程安全时，JDK8推荐使用LongAdder对象，它要比AtomicLong性能好
13、ThreadLocal对象推荐使用static，用于给多个线程共享


日志处理：
1、日志统一使用SLF4J日志框架，使用门面模式兼容多种日志实现框架
2、日志问题推荐保持至少15天
3、日志配置时，保证不重复打印日志
4、异常日志记录信息需要包括：案发现场信息和异常堆栈信息
5、在生产环境中，禁止输出debug日志、有选择输出info日志、使用warn记录刚上线的业务行为（记录哪些参数，用户容易忘记输入等）、error用于记录系统逻辑错误和异常
6、日志编写时，推荐使用条件判断或占位符，来减少不同环境下，不必要日志的字符串拼接
