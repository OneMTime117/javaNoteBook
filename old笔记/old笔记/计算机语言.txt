计算机编程语言                  
C语言 （完全面向过程，用于开发规模小的，对于大的程序，代码量很多，且会重复，使编程效率下降）                    
C++ （既面向对象，又面向过程，C语言的升级，继承了C语言的所有优点，又引入了类的封装、继承、多态，简化了程序的编写，提高代码重用率。其复杂程度高，兼容C语言底层编程特点，又具有高的开发效率，且能跨平台使用） 
 
C# （读法：C shrap） （完全面向对象的语言，开发效率非常高，容易上手，但基于基于.NET Framework上的语言，只能用于Windows平台，相比C、C++不同，需要中间平台解析运行，运行速度慢）

JAVA  （完全面向对象，由C++发展而来，吸收了C++的各种优点，去除了C++语言中多继承、指针的概念相对C++有较高的容错率，简单不容易出错，适合跨平台编写复杂大型项目）

Python （很强的面向对象特性，由C语言开发而来，解释型计算机程序设计语言，相对于JAVA这种静态类型语言，Python是一种动态类型语言，对变量类型定义不需要太严格，这样代码量少，不用编译，就可以直接执行，但执行速度比JAVA慢。但他的开发效率极高，可以将各种语言联合开发，俗称"胶水语言",万能）

PHP 开源脚本语言，混合了 C、Java、Perl 以及 PHP 自创新的语法。更快的实现动态页面，作为一个程序嵌入到HTML文档中。需要在网页服务器端运行（服务器端脚本语言），可以控制服务器的数据运行，指挥服务器工作。可以跨平台（即在多种平台服务器中执行）

JS  直译式脚本语言   面向对象，只需要浏览器的支持，不需要依赖于操作系统，被作为客服端脚本语言，可直接跨平台使用，安全性不高。文本嵌入在HTML页面中

html 超文本标记语言  用于构造网页表层

Xml  可扩展标记语言  结构和HTML类似，它不是超文本标记语言的替代，它是对超文本标记语言的补充。
它和超文本标记语言为不同的目的而设计：
它被设计用来传输和存储数据，其焦点是数据的内容。
超文本标记语言被设计用来显示数据，其焦点是数据的外观。
超文本标记语言旨在显示信息，而它旨在传输信息。

脚本：脚本（Script）是批处理文件的延伸，是一种纯文本保存的程序，一般来说的计算机脚本程序是确定的一系列控制计算机进行运算操作动作的组合，在其中可以实现一定的逻辑分支等。脚本通常可以由应用程序临时调用并执行。
脚本程序在执行时，是由系统的一个解释器，将其一条条的翻译成机器可识别的指令，并按程序顺序执行。因为脚本在执行时多了一道翻译的过程，所以它比二进制程序执行效率要稍低一些。 

C擅长写系统底层；java，c#，python，matlab，javascript的解释器或编译器，驱动程序，操作系统内核；
c++适合对效率要求较高的程序框架；大型游戏，大型桌面应用
c#适合写windows程序；
java适合写高度抽象的复杂系统；网页、游戏后台，企业开发、移动应用
python 什么都能做

动态语言和静态语言的区别
静态语言，所有变量需声明在使用，面向对象时，需先翻译，再拿来使用
动态语言，变量不需要声明，可以直接执行代码

各语言的运行速度:
C语言为底层语言，速度最快，C++由于有部分面向对象，有跟多的库和特性，会产生更多的系统开销，速度慢一点。
C#代码在编译时，不是直接给系统处理，（称为托管代码）而是交个CLR（公共语言运行库），转换为中间代码，然后进行编译，大大增加了代码的运行时间。
JAVA由于需要翻译在执行，所以相对于C、C++的速度慢很多，和C#相比，在windows上运行，C#比java快

java和C++的跨平台机制 
C++  在平台安装C++开发工具，然后把源代码编译，即可跨平台
JAVA 需要在平台安装JVM（虚拟机），然后在平台运行虚拟机翻译，达到跨平台效果
JAVA 通过在开发平台编译后，得到的代码，可以直接移植到其他平台中
由于JVM是由Linux内核系统的C++写的，因此只支持Linux内核系统，而IOS是UNIX系统，因此ios上不能运用JVM
Python跨平台和C++一样是源代码跨平台
需要安装编译的运行环境，跨平台有限，1、不能带有Windows特殊的东西、编码方式要和平台兼容

每种计算机语言都有自己的运行环境
VC++运行库  C++
JRE   java(jdk 是java的开发包，包含运行环境和开发环境)
.Net Framework运行库   C# 
兼容C语言的运行环境有很多，常见用VC++、和VS，  但.Net 不支持
 
VS(微软开发工具包)支持微软所有编程语言的开发和其他平台语言   
