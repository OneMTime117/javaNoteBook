java命名规范：
1、包命名：全小写，且包名应加前缀，如自己的域名，保证包名的唯一性如：com.xx.test

2、类命名：单词首字母大写，多个单词的首字母都大写，若类名为多个单词的缩写，应字母全部大写AccountDao

3、方法名：一个单词全小写，多个单词除首个单词外，其余单词首字母全大写 如：getTimeById

4、常量名：全部大写，多个单词应用下划线连接（在程序中除0,1外尽量不要用其他数字，多用常量表示并用常量名明确出该数字的意义） 如：MAX_VALUE

5、参数名：尽量用一个单词命名（且保证命名的明确性），一个单词全小写，多个单词除首单词外全部首字母大写（和方法名一致）

6、变量名：有三种命名方式：Camel标记法、Pascal标记法、匈牙利标记法
Camel标记法：首字母小写，之后的单词以大写字母开头                   
Pascal标记法：首字母大写，之后的单词以大写字母开头
匈牙利标记法：在Pascal标记法基础上，用1-3个字符前缀来表示其数据类型，确前缀单词全小写  如 string_typeName、intAgeNum

7、Javadoc注释   java文档注释
以 /** 开始，以 */结束，文档注释允许你在程序中嵌入关于程序的信息，有了这个注释就可以使用 javadoc 工具软件来生成信息，并输出到HTML文件中。更方便的记录你的代码程序信息

文档注释的格式：
/**
* .........
* .........
*/
在每个程序的最开始部分，一般都用Javadoc注释对程序的总体描述
以及版权信息，之后在主程序中 可以为每个类、接口、方法、字段添加 Javadoc注释，每个注释的开头部分先用一句话概括该类、接口、方法、字段所完成的功能，这句话应单独占据一行以突出其概括作用，在这句话后面可以跟 随更加详细的描述段落。在描述性段落之后还可以跟随一些以Javadoc注释标签开头的特殊段落，这些段落将在生成文档中以特定方式显示。


java语言版本：
1、javaSE（也叫J2SE） java标准版
它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web 服务开发的类，并为 Java Platform，Enterprise Edition（Java EE）提供基础。

2、javaEE(J2EE)     java企业版
企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端 Java 应用程序。Java EE 是在 Java SE 的基础上构建的，它提供 Web 服务、组件模型、管理和通信 API，可以用来实现企业级的面向服务体系结构（service-oriented architecture，SOA）和 Web 2.0 应用程序。

javaME（J2ME）   java微型版
Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。Java ME 包括灵活的用户界面、健壮的安全模型、许多内置的网络协议以及对可以动态下载的连网和离线应用程序的丰富支持。基于 Java ME 规范的应用程序只需编写一次，就可以用于许多设备，而且可以利用每个设备的本机功能。



-------------------------->设计模式，java一共有23种设计模式
MVC设计模式:
web开发模式：MVC
MVC是三个单词的缩写：M，Model（模型）；V,View( 视图 )，C，Control（控制）。

MVC模式的目的就是实现Web系统的职能分工，MVC结构的系统会从根本上强制我们将web系统中的数据对象、业务逻辑、用户界面三者分离，使得程序员（Java开发人员）集中精力于业务逻辑，界面程序员（HTML和JSP开发人员）集中精力于表现形式上。

Model层：实现系统的业务逻辑，即javaBean（javaBean是java组件，即java类，每一个程序都是由javaBean组成的）

View层：负责与用户交互，即在界面上展示数据对象给用户，即html，jsp

Control层：Model与View之间沟通的桥梁，它可以分派用户的请求并选择恰当的视图以用于显示，同时它也可以解释用户的输入并将它们映射为模型层可执行的操作，当然就是Servlet的职责了

JSP就是使用的MVC开发模式：jsp+servlet+javaBean


Dao设计模式:
数据库连接模式：Dao（data access object 数据访问对象）dao设计模式
Dao模式用于给service层提供连接数据库的方法
以basedao、数据实体、数据dao三个类组成，来连接访问数据库
basedao：提供连接数据库的对象、关闭数据连接对象的两个方法
数据实体（entity）：为数据库中需要操作的数据提供实体对象
数据dao：提供操作数据库数据的处理方法

单例模式：
由于某些对象在创建时，消耗性能较多，需要尽量减少其创建，因此产生了单例模式，来控制一个对象的创建只能存在一个，且只能被自身创建（被自身创建时，就可以判断是否该对象存在，存在则不创建，返回原有创建好的）
首先需要其构造函数为私有的，需要通过该对象自身公开方法来创建
之后需要将该对象作为一个公共对象（在该方法中添加一个自身属性对象，1、用于判断自己是否被创建2、用于公开给其他类调用其方法），调用这个自身公开方法，在方法中判断这个公共对象是否实例化（是否为null）
null，则说明该对象没有创建，就调用类中私有构造方法（自身属性对象被实例化），返回该属性对象；不为空，怎说明对象已经被创建，返回该自身属性对象（即该对象与原来创建的对象相同）
public class Peron {
创建一个公共的自身对象属性
	public static Peron peron;
//	私有的构造方法
	private Peron(){	
	}
//	共有的方法
	public static Peron getPeron(){
		if (peron==null) {
//			调用私有的构造方法
			Peron peron=new Peron();
		}
                               返回该自身属性
		return peron;
	}
}





Java框架：
通过某种开发模式（如MVC），将一些该模式常用的方法功能封装，优化一些编程过程，来简化该模式项目的开发。
任何集合框架都包含三大块内容：对外的接口、接口的实现和对集合运算的算法